[project]
name = "lazyscribe-onnx"
requires-python = ">=3.10.0"
description = "ONNX model artifact handling for lazyscribe"
authors = [
    {name = "Akshay Gupta", email="akgcodes@gmail.com"}
]
license = {text = "MIT license"}
classifiers = [
	"Development Status :: 3 - Alpha",
	"License :: OSI Approved :: MIT License",
	"Natural Language :: English",
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3 :: Only",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3.13",
]
dependencies = [
    "attrs<=25.1.0,>=21.2.0",
    "lazyscribe<=1.1.0,>=1.0.0",
    "onnx<=1.17.0,>=1.12.0",
    "python-slugify<=8.0.4,>=5.0.0",
]

dynamic = ["readme", "version"]

[project.optional-dependencies]
build = [
    "build",
    "commitizen",
    "twine",
    "wheel",
]
qa = [
    "edgetest",
    "mypy",
    "pre-commit",
    "ruff",
    "types-python-slugify",
    "uv",
]
tests = [
    "pytest",
    "pytest-cov",
    "time-machine",
]
dev = [
    "lazyscribe-onnx[build]",
    "lazyscribe-onnx[qa]",
    "lazyscribe-onnx[tests]",
]

[project.urls]
"Documentation" = "https://github.com/lazyscribe/lazyscribe-onnx"
"Repository" = "https://github.com/lazyscribe/lazyscribe-onnx"

# Build system
[build-system]
requires = ["setuptools>=64.0.0"]
build-backend = "setuptools.build_meta"

[project.entry-points."lazyscribe.artifact_type"]
onnx = "lazyscribe_onnx:ONNXArtifact"

##############################################################################
# Setuptools configuration
##############################################################################

[tool.setuptools]
include-package-data = true
zip-safe = false
packages = ["lazyscribe_onnx"]

[tool.setuptools.dynamic]
version = {attr = "lazyscribe_onnx._meta.__version__"}
readme = {file = ["README.md"], content-type = "text/markdown"}

##############################################################################
# Tooling
##############################################################################

# COMMITIZEN -----------------------------------------------------------------

[tool.commitizen]
version = "0.1.0"
tag_format = "v$version"
update_changelog_on_bump = true
version_files = [
    "lazyscribe_onnx/_meta.py:__version__",
]

# EDGETEST -------------------------------------------------------------------

[edgetest.envs.core]
python_version = "3.10"
extras = ["tests"]
upgrade = ["attrs", "lazyscribe", "onnxmltools", "python-slugify"]
command = "pytest tests"

# RUFF -----------------------------------------------------------------------

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
preview = true
select = [
	"E",  # pycodestyle errors
	"W",  # pycodestyle warnings
	"F",  # pyflakes
	"D",  # pydocstyle
	"I",  # isort
	"UP",  # pyupgrade
	"B",  # flake8-bugbear
	"C",  # flake8-comprehensions
	"T20",  # flake8-print
	"TID252",  # flake8-tidy-imports ban relative imports
	"SIM",  # flake8-simplify
	"LOG",  # flake8-logging
	"RUF",  # Ruff errors
]
ignore = [
	"C901",  # Function/method is too complex. (Add back in later.)
	"E501",  # Line too long. Using formatter instead.
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs}/*" = ["E402", "D", "F841", "ARG"]
"tutorials/*" = ["D", "T201"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

# MYPY -----------------------------------------------------------------------

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
allow_redefinition = true
check_untyped_defs = true
